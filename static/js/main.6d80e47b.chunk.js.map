{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","onSubmit","preventDefault","trim","id","uuid","type","className","placeholder","onChange","Cita","eliminarCita","onClick","Footer","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","Date","getFullYear","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d80e47b.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react'\r\nimport {v4 as uuid} from 'uuid'; //para generar los id de las citas (el key de cada una)\r\n//import uuid from 'uuid/v4'; salia asi en el video pero no anduvo.\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    \r\n    //Crear State de Citas (state local)\r\n    const [cita, actualizarCita] = useState({\r\n        //objeto\r\n        mascota:'',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    }); \r\n\r\n    //State para los mensajes de la validacion del formulario.\r\n    const [error, actualizarError]=useState(false); //valor inicar el un boolean\r\n     \r\n    //Funcion que se ejecuta cada vez que el usuario escribe en un input\r\n    //Recive como parametro el evento\r\n    const actualizarState = (e) =>{\r\n        actualizarCita({\r\n            ...cita,    //SPREAD OPERATOR sirve para arreglos y objetos \r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n\r\n    //Extraer los valores (object distructuring)\r\n    //se hace para no tener que escibir cita.mascota etc\r\n    const {mascota, propietario, fecha, hora, sintomas}= cita;\r\n\r\n    //Cuando el usuario presiona agregar cita\r\n    const submitCita = e =>{\r\n        e.preventDefault(); //Hace que se cancele el evento si se puede cancelar, sin que deje de funcionar el resto de la pagina\r\n\r\n        //Validar el formulario\r\n        if (mascota.trim() === '' || propietario.trim()==='' || fecha.trim() === '' || hora.trim() === '' ||\r\n        sintomas.trim() === '') {\r\n            //trim() -> elimina los espacios en blanco al principio o al final del string\r\n            actualizarError(true); //cambiamos el error a true porque hubo un error\r\n            return; //PARA QUE NO SE SIGA EJECUTANDO EL CODIGO DESPUES DE ESTA VALIDACION. (si es que hay un error).\r\n        }\r\n\r\n        //Eliminar el mensaje de error previo\r\n        actualizarError(false);\r\n\r\n        //Asignar un ID\r\n        cita.id = uuid(); //genera un id unico para la cita\r\n\r\n        //Crear la cita (colocarla en el state principal)\r\n        crearCita(cita);\r\n        //Reiniciar el form\r\n        actualizarCita({ //Funcion que modifica el State de formulario. Lo reiniciamos para que se pueda llenar otro.\r\n            mascota:'',\r\n            propietario:'',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h3>Crear Cita</h3>\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"nombre mascota\"\r\n                    onChange={actualizarState} //Funcion que toma lo que vamos escribiendo\r\n                    value={mascota} //para reiniciar el formulario\r\n                />\r\n            \r\n                <label>Nombre Dueño de la Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"nombre dueño\"\r\n                    onChange={actualizarState}\r\n                    value={propietario} //para reiniciar el formulario\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"Date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha} //para reiniciar el formulario\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"Time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}//para reiniciar el formulario\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea \r\n                    name=\"sintomas\" \r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState} \r\n                    value={sintomas}//para reiniciar el formulario\r\n                ></textarea>\r\n\r\n                {//operador ternario para mostrar el mensaje de error (funciona como un if-else)\r\n                error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n                : null }\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\" \r\n                >Agregar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n\r\n//Documentando con PropTypes\r\nFormulario.propTypes={\r\n    crearCita: PropTypes.func.isRequired // isRequired -> es Obligatorio.\r\n}\r\n \r\nexport default Formulario;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Cita = ({cita, eliminarCita}) =>( //return implicito con los parentesis\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n  );\r\n\r\n  //Documentando con PropTypes\r\n  Cita.propTypes={ //La key no se documenta.\r\n    cita: PropTypes.object.isRequired,  // isRequired -> es Obligatorio.\r\n    //eliminarCita: PropTypes.func.isRequired  // isRequired -> es Obligatorio.\r\n  }\r\n \r\nexport default Cita;","import React from 'react';\r\n\r\n//El return queda implicito\r\nconst Footer = ({fecha}) =>(\r\n        <footer>\r\n            <p> MTRZ Devs - Todos los derechos reservados &copy; {fecha}</p>\r\n        </footer>\r\n);\r\n \r\nexport default Footer;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\nimport Footer from \"./components/Footer\";\n\n\nfunction App() {\n\n  /* Citas en Local Storage\n  Local Storage almacena solo string (es una base de datos de string)\n  Se mantiene almacenado aun cuando se cierra el navegador.*/\n  //JSON.parse() Convierte el arreglo en un string facil de manipular\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));//vemos si hay citas en el localStorage\n  if (!citasIniciales) {\n    citasIniciales=[]; //si no hay citas iniciales entonces inicia como un arreglo vacio.\n  }\n\n\n  //Arreglo de citas\n  const [citas, guardarCitas]=useState(citasIniciales); //citasIniciales son el state inicial de citas. (asi arranca con lo que hay en el localStorage)\n\n  //UseEffect para realizar ciertas operaciones cuando el state cambia.\n  //UseEffect -> Se ejecuta cuando el componente esta listo pero tambien cuando hay cambios en el componente (cuando se actualiza algo)\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));//vemos si hay citas en el localStorage\n    \n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas)) //Si hay citasIniciales se las mandamos al localStoage\n    } else {\n      localStorage.setItem('citas', JSON.stringify([])) //si no hay entonces arranca como un arreglo vacio\n    }\n  }, [citas] ); //ponemos citas para que se ejecute cada vez que el State de citas cambie.\n  //Para asegurarnos de que se ejecute solo una vez, hay que pasarle un arrrglo vacio. \n  //Sino se va a ciclar. Por ejemplo en la consulta a una API.\n\n  //Funcion que tome las citas actuales y agregue una nueva\n  const crearCita = cita => {\n    guardarCitas([ //Usamos la funcion que modifica el State\n      ...citas, //Copia del state actual (arreglo)\n      cita //Agregamos la nueva cita al arreglo\n    ]);\n  }\n\n  //Funcion que elimina una cita por su ID\n  const eliminarCita = id =>{\n    //Nuevo arreglo con todas las citas que tengan el id diferente al que queremos eliminar\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  }\n\n  //Mensaje condicional Citas\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  //Obtener la fecha\n  const fecha = new Date().getFullYear();\n  return (\n    <Fragment>\n    <h1>Administrador de Pacientes</h1>\n\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"one-half column\">\n          <Formulario \n          crearCita={crearCita} //prop que le pasamos a formulario (es una funcion)\n          />\n        </div>\n        <div className=\"one-half column\">\n          <h3>{titulo/*Mensaje Condicional*/}</h3> \n          {citas.map(cita => ( //cita es el parametro de la arrow function\n            <Cita \n            key={cita.id} // (prop) siempre hay que pasar un key cuando listamos algo\n            cita={cita} //prop que le pasamos a Cita (es un objeto)\n            eliminarCita={eliminarCita} //prop que le pasamos a Cita (es una funcion)\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n        <Footer \n        fecha={fecha}\n        />\n        </div>\n      </div>\n    </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}